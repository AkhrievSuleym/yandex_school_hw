import 'package:fpdart/fpdart.dart';
import 'package:yandex_shmr_hw/core/error/failure.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_create_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_history_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_history_response_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_response_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_state_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/account/account_update_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/balance_data_point.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/enums/change_type.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/enums/currency.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/stat/stat_item.dart';
import 'package:yandex_shmr_hw/features/finance/domain/repository/bank_account_repository.dart';

class BankAccountRepositoryImpl implements BankAccountRepository {
  // –ú–æ–∫ —Å—á–µ—Ç–æ–≤: –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –∑–∞–ø–∞—Å–Ω–æ–π
  final List<AccountModel> _mockAccounts = [
    AccountModel(
      id: 1,
      userId: 1,
      name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
      balance: '10000.00',
      currency: Currency.rub,
      createdAt: DateTime.parse('2025-04-12T13:37:37.576Z'),
      updatedAt: DateTime.parse('2025-05-12T13:37:37.576Z'),
    ),
  ];

  final List<AccountHistoryModel> _mockHistory = [
    AccountHistoryModel(
      id: 1,
      accountId: 1,
      changeType: ChangeType.creation,
      previousState: null,
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '50000.00', // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(
        const Duration(days: 30),
      ), // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      createdAt: DateTime.now().subtract(const Duration(days: 30)),
    ),
    AccountHistoryModel(
      id: 2,
      accountId: 1,
      changeType: ChangeType.modification,
      previousState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '50000.00',
        currency: Currency.rub,
      ),
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '55000.00',
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(const Duration(days: 25)),
      createdAt: DateTime.now().subtract(const Duration(days: 25)),
    ),
    AccountHistoryModel(
      id: 3,
      accountId: 1,
      changeType: ChangeType.modification,
      previousState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '55000.00',
        currency: Currency.rub,
      ),
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '52000.00',
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(const Duration(days: 20)),
      createdAt: DateTime.now().subtract(const Duration(days: 20)),
    ),
    AccountHistoryModel(
      id: 4,
      accountId: 1,
      changeType: ChangeType.modification,
      previousState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '52000.00',
        currency: Currency.rub,
      ),
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '70000.00',
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(const Duration(days: 15)),
      createdAt: DateTime.now().subtract(const Duration(days: 15)),
    ),
    AccountHistoryModel(
      id: 5,
      accountId: 1,
      changeType: ChangeType.modification,
      previousState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '70000.00',
        currency: Currency.rub,
      ),
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '-5000.00',
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(const Duration(days: 10)),
      createdAt: DateTime.now().subtract(const Duration(days: 10)),
    ),
    AccountHistoryModel(
      id: 6,
      accountId: 1,
      changeType: ChangeType.modification,
      previousState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '-5000.00',
        currency: Currency.rub,
      ),
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '2000.00',
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(const Duration(days: 5)),
      createdAt: DateTime.now().subtract(const Duration(days: 5)),
    ),
    AccountHistoryModel(
      id: 7,
      accountId: 1,
      changeType: ChangeType.modification,
      previousState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '2000.00',
        currency: Currency.rub,
      ),
      newState: AccountStateModel(
        id: 1,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
        balance: '10000.00',
        currency: Currency.rub,
      ),
      changeTimestamp: DateTime.now().subtract(
        const Duration(days: 0),
      ), // –°–µ–≥–æ–¥–Ω—è
      createdAt: DateTime.now().subtract(const Duration(days: 0)),
    ),
  ];

  // –ú–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  final _mockStats = [
    StatItem(
      categoryId: 1,
      categoryName: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      emoji: 'üí∞',
      amount: '5000.00',
    ),
    StatItem(
      categoryId: 5,
      categoryName: '–ü—Ä–æ–¥—É–∫—Ç—ã',
      emoji: 'üçé',
      amount: '1500.00',
    ),
  ];
  @override
  Future<Either<Failure, List<AccountModel>>> getAllBankAccounts() async {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await Future.delayed(Duration(milliseconds: 500));
      return right(_mockAccounts);
    } catch (e) {
      return left(Failure('Error!'));
    }
  }

  @override
  Future<Either<Failure, AccountModel>> addBankAccount(
    AccountCreateModel requestNewAccount,
  ) async {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await Future.delayed(Duration(milliseconds: 500));
      final newAccount = AccountModel(
        id: _mockAccounts.length + 1,
        userId: 1,
        name: requestNewAccount.name,
        balance: requestNewAccount.balance,
        currency: requestNewAccount.currency,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      _mockAccounts.add(newAccount);
      _mockHistory.add(
        AccountHistoryModel(
          id: _mockHistory.length + 1,
          accountId: newAccount.id,
          changeType: ChangeType.creation,
          previousState: null,
          newState: AccountStateModel(
            id: newAccount.id,
            name: newAccount.name,
            balance: newAccount.balance,
            currency: newAccount.currency,
          ),
          changeTimestamp: DateTime.now(),
          createdAt: DateTime.now(),
        ),
      );
      return right(newAccount);
    } catch (e) {
      return left(Failure(e.toString()));
    }
  }

  @override
  Future<Either<Failure, AccountHistoryResponseModel>> getAccountHistory(
    int accountId,
  ) async {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await Future.delayed(Duration(milliseconds: 500));
      if (!_mockAccounts.any((account) => account.id == accountId)) {
        return left(Failure('Account not found'));
      }
      final account = _mockAccounts.firstWhere((a) => a.id == accountId);
      final history = _mockHistory
          .where((h) => h.accountId == accountId)
          .toList();

      final accountHistoryReponse = AccountHistoryResponseModel(
        accountid: account.id,
        accountname: account.name,
        currency: account.currency,
        currentBalance: account.balance,
        history: history.isNotEmpty
            ? history
            : [
                AccountHistoryModel(
                  id: 1,
                  accountId: account.id,
                  changeType: ChangeType.creation,
                  previousState: null,
                  newState: AccountStateModel(
                    id: account.id,
                    name: account.name,
                    balance: account.balance,
                    currency: account.currency,
                  ),
                  changeTimestamp: account.createdAt,
                  createdAt: account.createdAt,
                ),
              ],
      );
      return right(accountHistoryReponse);
    } catch (e) {
      return left(Failure(e.toString()));
    }
  }

  @override
  Future<Either<Failure, AccountResponseModel>> getBankAccountById(
    int id,
  ) async {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await Future.delayed(Duration(milliseconds: 500));
      final account = _mockAccounts.firstWhere((account) => account.id == id);
      return right(
        AccountResponseModel(
          id: account.id,
          name: account.name,
          balance: account.balance,
          currency: account.currency,
          incomeStats: _mockStats[0], // –ó–∞—Ä–ø–ª–∞—Ç–∞
          expenseStats: _mockStats[1], // –ü—Ä–æ–¥—É–∫—Ç—ã
          createdAt: account.createdAt,
          updatedAt: account.updatedAt,
        ),
      );
    } catch (e) {
      return left(Failure('Account not found'));
    }
  }

  @override
  Future<Either<Failure, AccountModel>> updateBankAccount(
    int accountId,
    AccountUpdateModel requestUpdatedAccount,
  ) async {
    try {
      await Future.delayed(Duration(milliseconds: 500));
      final index = _mockAccounts.indexWhere(
        (account) => account.id == accountId,
      );
      if (index == -1) {
        return left(Failure('Account not found'));
      }

      final oldAccount = _mockAccounts[index];
      final updatedAccount = AccountModel(
        id: oldAccount.id,
        userId: oldAccount.userId,
        name: requestUpdatedAccount.name,
        balance: requestUpdatedAccount.balance,
        currency: requestUpdatedAccount.currency,
        createdAt: oldAccount.createdAt,
        updatedAt: DateTime.now(),
      );
      _mockAccounts[index] = updatedAccount;
      _mockHistory.add(
        AccountHistoryModel(
          id: _mockHistory.length + 1,
          accountId: accountId,
          changeType: ChangeType.modification,
          previousState: AccountStateModel(
            id: oldAccount.id,
            name: oldAccount.name,
            balance: oldAccount.balance,
            currency: oldAccount.currency,
          ),
          newState: AccountStateModel(
            id: updatedAccount.id,
            name: updatedAccount.name,
            balance: updatedAccount.balance,
            currency: updatedAccount.currency,
          ),
          changeTimestamp: DateTime.now(),
          createdAt: DateTime.now(),
        ),
      );
      return right(updatedAccount);
    } catch (e) {
      return left(Failure("Error!"));
    }
  }

  @override
  Future<Either<Failure, List<BalanceDataPoint>>> getBalanceHistoryForChart(
    int accountId,
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      await Future.delayed(
        const Duration(milliseconds: 700),
      ); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

      final account = _mockAccounts.firstWhere((acc) => acc.id == accountId);
      final initialBalance = double.parse(account.balance);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      final allHistory =
          _mockHistory.where((h) => h.accountId == accountId).toList()
            ..sort((a, b) => a.changeTimestamp.compareTo(b.changeTimestamp));

      // –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –≤—Å–µ –¥–Ω–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      if (allHistory.isEmpty) {
        final List<BalanceDataPoint> dailyBalances = [];
        for (
          DateTime date = startDate;
          date.isBefore(endDate.add(Duration(days: 1)));
          date = date.add(const Duration(days: 1))
        ) {
          dailyBalances.add(
            BalanceDataPoint(date: date, amount: initialBalance),
          );
        }
        return right(dailyBalances);
      }

      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ startDate
      double currentBalance = 0.0;
      final firstHistoryEntry = allHistory.firstWhere(
        (h) => h.changeType == ChangeType.creation,
        orElse: () => allHistory.first, // –ï—Å–ª–∏ –Ω–µ—Ç creation, –±–µ—Ä–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é
      );
      currentBalance = double.parse(firstHistoryEntry.newState.balance);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ startDate, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      for (final history in allHistory) {
        if (history.changeTimestamp.isBefore(startDate)) {
          if (history.changeType == ChangeType.creation) {
            currentBalance = double.parse(history.newState.balance);
          } else if (history.changeType == ChangeType.modification) {
            currentBalance = double.parse(history.newState.balance);
          }
          // –î–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å
          // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ history.
        }
      }

      final Map<DateTime, double> dailyBalancesMap = {};
      DateTime currentDate = startDate;

      while (currentDate.isBefore(endDate.add(const Duration(days: 1)))) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        final dayHistory =
            allHistory
                .where(
                  (h) =>
                      h.changeTimestamp.year == currentDate.year &&
                      h.changeTimestamp.month == currentDate.month &&
                      h.changeTimestamp.day == currentDate.day,
                )
                .toList()
              ..sort((a, b) => a.changeTimestamp.compareTo(b.changeTimestamp));

        if (dayHistory.isNotEmpty) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, –±–µ—Ä–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
          currentBalance = double.parse(dayHistory.last.newState.balance);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
          // (—É–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ currentBalance)
        }

        dailyBalancesMap[currentDate] = currentBalance;
        currentDate = currentDate.add(const Duration(days: 1));
      }

      final List<BalanceDataPoint> result =
          dailyBalancesMap.entries
              .map((e) => BalanceDataPoint(date: e.key, amount: e.value))
              .toList()
            ..sort((a, b) => a.date.compareTo(b.date));

      return right(result);
    } catch (e) {
      return left(Failure(e.toString()));
    }
  }
}
