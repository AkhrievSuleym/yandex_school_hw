// lib/features/finance/data/mock/transactions_mock_data.dart

import 'dart:math'; // <--- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Random
import 'package:yandex_shmr_hw/features/finance/data/models/category/category_model.dart';
import 'package:yandex_shmr_hw/features/finance/data/models/transaction/transaction_model.dart';

abstract class CategoriesMockData {
  static final categories = [
    {"id": 1, "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "emoji": "üí∞", "isIncome": true},
    {"id": 2, "name": "–§—Ä–∏–ª–∞–Ω—Å", "emoji": "üíª", "isIncome": true},
    {"id": 3, "name": "–ü–æ–¥–∞—Ä–∫–∏", "emoji": "üéÅ", "isIncome": true},
    {"id": 4, "name": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º", "emoji": "üè¶", "isIncome": true},
    {"id": 5, "name": "–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞", "emoji": "üîÑ", "isIncome": true},
    {"id": 6, "name": "–ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞", "emoji": "üè†", "isIncome": true},
    {"id": 7, "name": "–ñ–∏–ª—å—ë", "emoji": "üè†", "isIncome": false},
    {"id": 8, "name": "–ü—Ä–æ–¥—É–∫—Ç—ã", "emoji": "üçé", "isIncome": false},
    {"id": 9, "name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "emoji": "üöó", "isIncome": false},
    {"id": 10, "name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé≠", "isIncome": false},
    {"id": 11, "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "emoji": "üçΩÔ∏è", "isIncome": false},
    {"id": 12, "name": "–û–¥–µ–∂–¥–∞", "emoji": "üëï", "isIncome": false},
    {"id": 13, "name": "–ó–¥–æ—Ä–æ–≤—å–µ", "emoji": "üè•", "isIncome": false},
    {"id": 14, "name": "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "emoji": "üí°", "isIncome": false},
    {"id": 15, "name": "–¢–µ—Ö–Ω–∏–∫–∞", "emoji": "üì±", "isIncome": false},
    {"id": 16, "name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "emoji": "üìö", "isIncome": false},
    {"id": 17, "name": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "emoji": "‚úàÔ∏è", "isIncome": false},
    {"id": 18, "name": "–ü–æ–¥–ø–∏—Å–∫–∏", "emoji": "üì∫", "isIncome": false},
    {"id": 19, "name": "–ü–æ–¥–∞—Ä–∫–∏", "emoji": "üéÄ", "isIncome": false},
    {"id": 20, "name": "–ö—Ä–∞—Å–æ—Ç–∞", "emoji": "üíÑ", "isIncome": false},
    {"id": 21, "name": "–°–ø–æ—Ä—Ç", "emoji": "üèãÔ∏è", "isIncome": false},
    {"id": 22, "name": "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", "emoji": "üêæ", "isIncome": false},
    {"id": 23, "name": "–•–æ–±–±–∏", "emoji": "üé®", "isIncome": false},
    {"id": 24, "name": "–ö—Ä–µ–¥–∏—Ç—ã", "emoji": "üí≥", "isIncome": false},
  ];

  static List<CategoryModel> get incomeCategories => categories
      .where((cat) => cat["isIncome"] == true)
      .map((json) => CategoryModel.fromJson(json))
      .toList();

  static List<CategoryModel> get expenseCategories => categories
      .where((cat) => cat["isIncome"] == false)
      .map((json) => CategoryModel.fromJson(json))
      .toList();
}

abstract class TransactionsMockData {
  static final List<TransactionModel> _mockTransactions = [];
  static int _nextId = 1;
  static final Random _random = Random(); // <--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Random

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã
  static String _generateRandomAmount(bool isIncome) {
    double minAmount;
    double maxAmount;

    if (isIncome) {
      minAmount = 1000.0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥
      maxAmount = 150000.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥
    } else {
      minAmount = 50.0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
      maxAmount = 15000.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    double amount = minAmount + _random.nextDouble() * (maxAmount - minAmount);
    return amount.toStringAsFixed(2);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  static void _addTransaction({
    required int accountId,
    required CategoryModel category,
    required DateTime transactionDate,
    String? comment,
  }) {
    _mockTransactions.add(
      TransactionModel(
        id: _nextId++,
        accountId: accountId,
        categoryId: category.id,
        amount: _generateRandomAmount(category.isIncome),
        transactionDate: transactionDate,
        comment:
            comment ??
            category
                .name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω
        createdAt: transactionDate,
        updatedAt: transactionDate,
      ),
    );
  }

  static List<TransactionModel> generateTransactions() {
    _mockTransactions
        .clear(); // –û—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
    _nextId = 1;

    final today = DateTime.now();
    // final yesterday = today.subtract(
    //   const Duration(days: 1),
    // ); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    final lastMonth = today.subtract(
      const Duration(days: 35),
    ); // –ü—Ä–∏–º–µ—Ä–Ω–æ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    final twoMonthsAgo = today.subtract(
      const Duration(days: 65),
    ); // –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–≤–∞ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥

    // ---- –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (3 –¥–æ—Ö–æ–¥–∞, 3 —Ä–∞—Å—Ö–æ–¥–∞) ----
    // –î–æ—Ö–æ–¥—ã
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[0], // –ó–∞—Ä–ø–ª–∞—Ç–∞
      transactionDate: DateTime(today.year, today.month, today.day, 10, 0, 0),
      comment: '–ê–≤–∞–Ω—Å –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[1], // –§—Ä–∏–ª–∞–Ω—Å
      transactionDate: DateTime(today.year, today.month, today.day, 12, 30, 0),
      comment: '–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–µ–∫—Ç "Alfa"',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[2], // –ü–æ–¥–∞—Ä–∫–∏
      transactionDate: DateTime(today.year, today.month, today.day, 18, 15, 0),
      comment: '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –º–∞–º—ã',
    );

    // –†–∞—Å—Ö–æ–¥—ã
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[0], // –ñ–∏–ª—å—ë
      transactionDate: DateTime(today.year, today.month, today.day, 9, 0, 0),
      comment: '–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[1], // –ü—Ä–æ–¥—É–∫—Ç—ã
      transactionDate: DateTime(today.year, today.month, today.day, 11, 45, 0),
      comment: '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ê—à–∞–Ω–µ',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[2], // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      transactionDate: DateTime(today.year, today.month, today.day, 17, 0, 0),
      comment: '–û–ø–ª–∞—Ç–∞ —Ç–∞–∫—Å–∏',
    );

    // ---- –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü (3 –¥–æ—Ö–æ–¥–∞, 3 —Ä–∞—Å—Ö–æ–¥–∞) ----
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–Ω–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –º–µ—Å—è—Ü–µ
    final dayInLastMonth1 = lastMonth.add(const Duration(days: 5));
    final dayInLastMonth2 = lastMonth.add(const Duration(days: 15));
    final dayInLastMonth3 = lastMonth.add(const Duration(days: 25));

    // –î–æ—Ö–æ–¥—ã
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[0], // –ó–∞—Ä–ø–ª–∞—Ç–∞
      transactionDate: DateTime(
        dayInLastMonth1.year,
        dayInLastMonth1.month,
        dayInLastMonth1.day,
        10,
        0,
        0,
      ),
      comment: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[3], // –ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º
      transactionDate: DateTime(
        dayInLastMonth2.year,
        dayInLastMonth2.month,
        dayInLastMonth2.day,
        14,
        0,
        0,
      ),
      comment: '–î–æ—Ö–æ–¥ –ø–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º—É —Å—á–µ—Ç—É',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[4], // –í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞
      transactionDate: DateTime(
        dayInLastMonth3.year,
        dayInLastMonth3.month,
        dayInLastMonth3.day,
        16,
        0,
        0,
      ),
      comment: '–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞ –æ—Ç –°–µ—Ä–≥–µ—è',
    );

    // –†–∞—Å—Ö–æ–¥—ã
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[3], // –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
      transactionDate: DateTime(
        dayInLastMonth1.year,
        dayInLastMonth1.month,
        dayInLastMonth1.day,
        20,
        0,
        0,
      ),
      comment: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[4], // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
      transactionDate: DateTime(
        dayInLastMonth2.year,
        dayInLastMonth2.month,
        dayInLastMonth2.day,
        19,
        0,
        0,
      ),
      comment: '–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ "–ë–µ–ª—ã–π –∫—Ä–æ–ª–∏–∫"',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[5], // –û–¥–µ–∂–¥–∞
      transactionDate: DateTime(
        dayInLastMonth3.year,
        dayInLastMonth3.month,
        dayInLastMonth3.day,
        15,
        0,
        0,
      ),
      comment: '–ù–æ–≤—ã–µ –¥–∂–∏–Ω—Å—ã',
    );

    // ---- –î–≤–∞ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ (2 –¥–Ω—è –ø–æ 2 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏—Ç–æ–≥–æ 4 –¥–æ—Ö–æ–¥–∞, 4 —Ä–∞—Å—Ö–æ–¥–∞) ----
    // –í—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –¥–Ω—è
    final dayInTwoMonthsAgo1 = twoMonthsAgo.add(const Duration(days: 8));
    final dayInTwoMonthsAgo2 = twoMonthsAgo.add(const Duration(days: 20));

    // –î–æ—Ö–æ–¥—ã - –î–µ–Ω—å 1
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[0], // –ó–∞—Ä–ø–ª–∞—Ç–∞
      transactionDate: DateTime(
        dayInTwoMonthsAgo1.year,
        dayInTwoMonthsAgo1.month,
        dayInTwoMonthsAgo1.day,
        10,
        0,
        0,
      ),
      comment: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–∑–∞–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[1], // –§—Ä–∏–ª–∞–Ω—Å
      transactionDate: DateTime(
        dayInTwoMonthsAgo1.year,
        dayInTwoMonthsAgo1.month,
        dayInTwoMonthsAgo1.day,
        14,
        0,
        0,
      ),
      comment: '–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–µ–∫—Ç "Beta"',
    );
    // –î–æ—Ö–æ–¥—ã - –î–µ–Ω—å 2
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[5], // –ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞
      transactionDate: DateTime(
        dayInTwoMonthsAgo2.year,
        dayInTwoMonthsAgo2.month,
        dayInTwoMonthsAgo2.day,
        11,
        0,
        0,
      ),
      comment: '–ü—Ä–æ–¥–∞–∂–∞ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.incomeCategories[2], // –ü–æ–¥–∞—Ä–∫–∏
      transactionDate: DateTime(
        dayInTwoMonthsAgo2.year,
        dayInTwoMonthsAgo2.month,
        dayInTwoMonthsAgo2.day,
        17,
        0,
        0,
      ),
      comment: '–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
    );

    // –†–∞—Å—Ö–æ–¥—ã - –î–µ–Ω—å 1
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[6], // –ó–¥–æ—Ä–æ–≤—å–µ
      transactionDate: DateTime(
        dayInTwoMonthsAgo1.year,
        dayInTwoMonthsAgo1.month,
        dayInTwoMonthsAgo1.day,
        12,
        0,
        0,
      ),
      comment: '–ü—Ä–∏–µ–º —É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[7], // –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
      transactionDate: DateTime(
        dayInTwoMonthsAgo1.year,
        dayInTwoMonthsAgo1.month,
        dayInTwoMonthsAgo1.day,
        16,
        0,
        0,
      ),
      comment: '–û–ø–ª–∞—Ç–∞ –ñ–ö–£ –∑–∞ –º–∞—Ä—Ç',
    );
    // –†–∞—Å—Ö–æ–¥—ã - –î–µ–Ω—å 2
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[8], // –¢–µ—Ö–Ω–∏–∫–∞
      transactionDate: DateTime(
        dayInTwoMonthsAgo2.year,
        dayInTwoMonthsAgo2.month,
        dayInTwoMonthsAgo2.day,
        13,
        0,
        0,
      ),
      comment: '–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    );
    _addTransaction(
      accountId: 1,
      category: CategoriesMockData.expenseCategories[9], // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      transactionDate: DateTime(
        dayInTwoMonthsAgo2.year,
        dayInTwoMonthsAgo2.month,
        dayInTwoMonthsAgo2.day,
        19,
        0,
        0,
      ),
      comment: '–ö—É—Ä—Å—ã –ø–æ –¥–∏–∑–∞–π–Ω—É',
    );

    return _mockTransactions;
  }
}
